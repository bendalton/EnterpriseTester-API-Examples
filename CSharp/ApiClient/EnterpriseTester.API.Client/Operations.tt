<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="Newtonsoft.Json.Schema" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".designer.cs" #>
<#


    var listing = JsonConvert.DeserializeObject<ResourceListing>(File.ReadAllText(Host.ResolvePath("Swagger.json")));

#>
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using EnterpriseTester.API.Client.Models;

namespace <#=CallContext.GetData("NamespaceHint")#>
{
    public static class Operations
    {
<#foreach (var resourceApi in listing.Apis)
{
#>

<#
    foreach (var operation in resourceApi.Operations)
    {
        var parameters = (operation.Parameters??Enumerable.Empty<ResourceApiOperationParameter>()).ToList();

        var pathParams = parameters.Where(x => x.ParamType == "path");
        var bodyParams = parameters.Where(x => x.ParamType == "body");
		var formParams = parameters.Where(x => x.ParamType == "form");
        var queryParams = parameters.Where(x => x.ParamType == "query");       

		var orderedParameters = pathParams.Select(x => TypeName(x.DataType) + " " + RemovePunctuation(x.Name));
		orderedParameters = orderedParameters.Concat(bodyParams.Select(x => TypeName(x.DataType) + " " + RemovePunctuation(x.Name)));
		orderedParameters = orderedParameters.Concat(formParams.Select(x => TypeName(x.DataType) + (IsStruct(x.DataType)?"? ": " ") + RemovePunctuation(x.Name) + " = null"));
		orderedParameters = orderedParameters.Concat(queryParams.Select(x => TypeName(x.DataType) + (IsStruct(x.DataType)?"? ": " ") + RemovePunctuation(x.Name) + " = null"));

        string formalParameters = string.Join(", ", orderedParameters);
    
        string methodName = Capitalize(operation.Nickname);

        string returnType = TypeName(operation.ResponseClass ?? "Unit");
        string path = resourceApi.Path.TrimStart('/').Replace("{", "\" + ").Replace("}", " + \"");

#>

        /// <summary>
        /// Sends a <#= operation.HttpMethod #> to '<#= resourceApi.Path #>'
        /// </summary>
<#
        foreach (var parameter in parameters)
        {
#>
        /// <param name="<#= RemovePunctuation(parameter.Name) #>">a <#=parameter.ParamType#> parameter (<#=parameter.Description??"no description" #>)</param>
<#
        }
#>
        /// <returns></returns>
        public static RestOperation <#= methodName#>(<#= formalParameters#>)
        {
            return new RestOperation("<#=operation.HttpMethod #>", "<#=path#>")
                { 
<#
		var bodyParam =  bodyParams.FirstOrDefault();

		if (bodyParam != null) {
#>
					Content = <#=bodyParam.Name #><# if (bodyParam != null && ( queryParams.Any() || formParams.Any()) ) { #>,<# } else { #><#="\r\n"#><# } #>
<#
		}
#>
<#
        if (queryParams.Any())
        {
#>
                    QueryParams = 
                        {
<#
            foreach (var p in queryParams)
            {
#>
                             {"<#=p.Name#>", <#=RemovePunctuation(p.Name)#>},
<#  
            }
#>
                        }
<#  
        }
#>
<# if (formParams.Any() && queryParams.Any()) { #> , <# } #>
<#
        if (formParams.Any())
        {
#>
                    FormParams = 
                        {
<#
            foreach (var p in formParams)
            {
#>
                             {"<#=p.Name#>", <#=RemovePunctuation(p.Name)#>},
<#  
            }
#>
                        }
<#  
        }
#>
                };
        }
<#
    } 
#>
<#
} 
#>


    }
}


<#+

string PrefixWithComma(string s)
{
	return s;
}

string RemovePunctuation(string s)
{
	return s.StartsWith("$") ? s.Substring(1) : s;
}

string CamelCase(string s)
{
    return Regex.Replace(" "+s.ToLowerInvariant(), " .", match => match.Value.ToUpperInvariant().Trim());
}

string Capitalize(string s)
{
	return s[0].ToString().ToUpper() + s.Substring(1);
}

string CapitalizeFirst(string s)
{
	return s[0].ToString().ToUpper() + s.Substring(1).ToLower();
}

bool IsStruct(string dataType)
{
    return dataType != "string";
}


string TypeName(string s)
{
    if (s == "boolean")
    {
        return "bool";
    }
	if (s == "integer")
	{
		return "int";
	}
    if (s.StartsWith("QueryResultsOf"))
    {
        return string.Format("QueryResults<{0}>", s.Replace("QueryResultsOf", ""));
    }
	return s.Replace("list[", "List<").Replace("]", ">");
}

static JsonSchemaResolver LoadSchemas(IEnumerable<JObject> modelSchemas)
{
    var resolver = new JsonSchemaResolver();
    foreach (JObject model in modelSchemas)
    {
        var noProps = (JObject) model.DeepClone();
        var property = noProps.Property("properties");
        if (property != null)
        {
            property.Remove();
        }
        JsonSchema.Read(noProps.CreateReader(), resolver);
    }

    foreach (JObject model in modelSchemas)
    {
        var id = model.Property("id").Value.ToString();
        var oldSchema = resolver.GetSchema(id);
        resolver.LoadedSchemas.Remove(oldSchema);
        var newSchema = JsonSchema.Read(model.CreateReader(), resolver);
        oldSchema.Properties = newSchema.Properties;
        resolver.LoadedSchemas.Remove(newSchema);
        resolver.LoadedSchemas.Add(oldSchema);
    }
    return resolver;
}



public class ResourceListing
{
    public string ApiVersion { get; set; }
    public string SwaggerVersion { get; set; }
    public string BasePath { get; set; }
    public string ResourcePath { get; set; }
    public List<ResourceApi> Apis { get; set; }
}

    

public class ResourceApi
{
    public string Path { get; set; }
    public string Description { get; set; }
    public List<ResourceApiOperation> Operations { get; set; }
}

public class ResourceApiOperation
{
    public string HttpMethod { get; set; }
    public string Nickname { get; set; }
    public string ResponseClass { get; set; }
    public string Summary { get; set; }
    public string Notes { get; set; }
    public List<ResourceApiOperationParameter> Parameters { get; set; }
    public IDictionary<int, string> StatusCodes { get; set; }
}


public class ResourceApiOperationParameter
{
    public string ParamType { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public string DataType { get; set; }
    public bool Required { get; set; }
    public bool AllowMultiple { get; set; }
    public OperationParameterAllowableValues AllowableValues { get; set; }
}

public class OperationParameterAllowableValues
{
    public int Max { get; set; }
    public int Min { get; set; }
    public string ValueType { get; set; }
}


#>